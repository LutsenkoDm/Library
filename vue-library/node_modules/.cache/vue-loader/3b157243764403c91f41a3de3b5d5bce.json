{"remainingRequest":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\src\\components\\LibraryInputTextField.vue?vue&type=style&index=0&id=3626b484&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\src\\components\\LibraryInputTextField.vue","mtime":1616886077149},{"path":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLm1iLTE4IHsNCiAgbWFyZ2luLWJvdHRvbTogLTE4JTsNCn0NCg=="},{"version":3,"sources":["LibraryInputTextField.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;AACA;AACA","file":"LibraryInputTextField.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"row mb-18\">\r\n    <div class=\"input-field col s9\">\r\n\r\n      <template v-if=\"possibleValuesList != null && type != null\">\r\n        <input :id=\"nameToShow\" :type=\"type\" class=\"validate mb-18\" v-model=\"value\" @focusout=\"input\" :list=\"'possible'+ nameToShow\" >\r\n        <datalist :id=\"'possible'+ nameToShow\">\r\n          <option v-for=\"possibleValue in possibleValuesList\" :key=\"possibleValue\" :value=\"possibleValue\" />\r\n        </datalist>\r\n        <label :for=\"nameToShow\">{{ nameToShow }}</label>\r\n        <span class=\"helper-text mb-18\" data-error=\"wrong\" data-success=\"right\"></span>\r\n      </template>\r\n\r\n      <template v-else-if=\"type != null\">\r\n        <input :id=\"nameToShow\" :type=\"type\" class=\"validate mb-18\" v-model=\"value\" @focusout=\"input\">\r\n        <label :for=\"nameToShow\">{{ nameToShow }}</label>\r\n        <span class=\"helper-text mb-18\" data-error=\"wrong\" data-success=\"right\"></span>\r\n      </template>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"LibraryInputTextField\",\r\n  props: { nameToShow: String, nameInBackend: String, type: String, possibleValuesList: Array, urlToFindMappedValue: String },\r\n  methods: {\r\n    async input() {\r\n      let valueForResponse = ''\r\n      if (this.urlToFindMappedValue) {\r\n        let possibleInputValues = document.querySelector('#possible'+ this.nameToShow).getElementsByTagName('option')\r\n        let isPossible = false\r\n        for (let possibleInputValue of possibleInputValues) {\r\n          if (this.value === possibleInputValue.getAttribute('value')) {\r\n            isPossible = true\r\n            break\r\n          }\r\n        }\r\n        if (isPossible) {\r\n          let urlArguments = ''\r\n          this.value.split(',').forEach(argument => urlArguments += '/' + argument)\r\n          const mappedValueResponse = await fetch('http://localhost:8081/lib' + this.urlToFindMappedValue + urlArguments, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            }\r\n          });\r\n          if (mappedValueResponse.ok) {\r\n            valueForResponse = await mappedValueResponse.json()\r\n          }\r\n        } else {\r\n          document.querySelector('#' + this.nameToShow).classList.add('invalid')\r\n        }\r\n      }\r\n      else {\r\n        valueForResponse = this.value\r\n      }\r\n      this.$emit('input', {nameInBackend: this.nameInBackend, value: valueForResponse})\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      value: '',\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.mb-18 {\r\n  margin-bottom: -18%;\r\n}\r\n</style>"]}]}