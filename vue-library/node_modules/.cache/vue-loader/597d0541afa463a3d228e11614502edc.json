{"remainingRequest":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\src\\views\\Journal.vue?vue&type=style&index=0&id=e6b8db26&scoped=true&lang=scss&","dependencies":[{"path":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\src\\views\\Journal.vue","mtime":1617626296376},{"path":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Dmitrii\\WebstormProjects\\vue-library\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQpAaW1wb3J0ICd+bWF0ZXJpYWxpemUtY3NzL2Rpc3QvY3NzL21hdGVyaWFsaXplLm1pbi5jc3MnOw0KDQo="},{"version":3,"sources":["Journal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA","file":"Journal.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div id=\"journal\">\r\n    <LibraryEntityPage v-bind:table-fields=\"tableFields\" @reloadAvailableBookNames=\"loadAvailableBookNames\" @reloadJournal=\"loadJournal\"\r\n                       v-bind:table-data=\"tableData\"\r\n                       v-bind:entityName=\"'JournalRecord'\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport LibraryEntityPage from \"../components/LibraryEntityPage\";\r\n\r\nexport default {\r\n  name: 'Journal',\r\n  components: {\r\n    LibraryEntityPage\r\n  },\r\n  data() {\r\n    return {\r\n      tableFields: [\r\n        {nameToShow: 'Id',       nameInBackend: 'id' },\r\n        {nameToShow: 'Book',     nameInBackend: 'bookId',   type: \"text\", possibleValuesList: [], urlToFindMappedValue: '/bookIdByName'},\r\n        {nameToShow: 'Client',   nameInBackend: 'clientId', type: \"text\", possibleValuesList: [], urlToFindMappedValue: '/clientIdByFirstLastNameAndPassportNumber'},\r\n        {nameToShow: 'Date beg', nameInBackend: 'dateBeg',  type: \"date\"},\r\n        {nameToShow: 'Date end', nameInBackend: 'dateEnd',  type: \"date\"},\r\n        {nameToShow: 'Date ret', nameInBackend: 'dateRet',  type: \"date\"},\r\n      ],\r\n      tableData: [],\r\n    }\r\n  },\r\n  methods: {\r\n    async loadAvailableBookNames() {\r\n      const availableBookNamesResponse = await fetch('http://localhost:8081/lib/availableBookNames', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      if (availableBookNamesResponse.ok) {\r\n        this.tableFields[1].possibleValuesList = Array.from(await availableBookNamesResponse.json());\r\n      }\r\n    },\r\n    async loadClients() {\r\n      const clientsResponse = await fetch('http://localhost:8081/lib/clients', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      if (clientsResponse.ok) {\r\n        const clients = Array.from(await clientsResponse.json())\r\n        const clientsInfoToShow = [clients.length]\r\n        for (let i = 0; i < clients.length; i++) {\r\n          let clientInfo = []\r\n          clientInfo.push(clients[i].firstName)\r\n          clientInfo.push(clients[i].lastName)\r\n          clientInfo.push(clients[i].passportNum)\r\n          clientsInfoToShow[i] = clientInfo\r\n        }\r\n        this.tableFields[2].possibleValuesList = clientsInfoToShow\r\n      }\r\n    },\r\n    async loadJournal() {\r\n      const journalResponse = await fetch('http://localhost:8081/lib/journal', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      console.log(journalResponse);\r\n      if (journalResponse.ok) {\r\n        this.tableData = Array.from(await journalResponse.json());\r\n      }\r\n    }\r\n  },\r\n\r\n  mounted: async function () {\r\n    await this.loadJournal()\r\n    await this.loadAvailableBookNames()\r\n    await this.loadClients()\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '~materialize-css/dist/css/materialize.min.css';\r\n\r\n</style>\r\n\r\n\r\n"]}]}